<?php

namespace Dayscript\TiendaClaroBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\Common\Collections\Criteria;
use Doctrine\Common\Collections\ArrayCollection;


/**
 * StoPlanRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class StoPlanRepository extends EntityRepository
{
    private $id_negocio_movil = 1;
    private $id_negocio_fijo = 2;


    public function findAll($wheres = [])
    {
        $planes = $this->getEntityManager()->createQueryBuilder()
            ->select('p')
            ->from('DayscriptTiendaClaroBundle:StoPlan', 'p')
            ->Where('p.deletedAt is NULL')
            ->leftJoin('DayscriptTiendaClaroBundle:CustomPlanMovil', 'cpm', 'WITH', 'cpm.idPlan = p.id')
            ->orderBy('cpm.orden', 'ASC');
        foreach ($wheres as $where) {
            $planes = $planes->Andwhere($where);
        }
        $planes = $planes->getQuery()->getResult();
        return $planes;
    }

    public function findAllFijos($wheres = [], $servicio = null, $conexion = null)
    {
        $planes = $this->getEntityManager()->createQueryBuilder()
            ->select('p')
            ->from('DayscriptTiendaClaroBundle:StoPlan', 'p')
            ->Where('p.deletedAt is NULL')
            ->leftJoin('DayscriptTiendaClaroBundle:CustomPlanFijo', 'cpf', 'WITH', 'cpf.idPlan = p.id')
            ->leftJoin('DayscriptTiendaClaroBundle:TipoStoPlan', 't', 'WITH', 'p.idTipo = t.id')
            ->orderBy('cpf.orden', 'ASC');
        if (isset($servicio)){
            $planes = $planes->Andwhere('t.displayname = :servicio')
            ->setParameter('servicio', $servicio);
        }
        if (isset($conexion)){
            $planes = $planes->Andwhere('cpf.subtipo = :conexion')
            ->setParameter('conexion', $conexion);
        }
        foreach ($wheres as $where) {
            $planes = $planes->Andwhere($where);
        }
        $planes = $planes->getQuery()->getResult();

        return $planes;
    }

    public function findPlanesMoviles($parameters = [])
    {
        $planes = $this->getEntityManager()->createQueryBuilder()
            ->select('p.slug', 'p.nombre', 'p.descripcion as nombreOne', 'p.cuotaSinImp', 'cus.bp', 'cus.bpWeb', 'cus.oneId')
            ->from('DayscriptTiendaClaroBundle:StoPlan', 'p')
            ->leftJoin('DayscriptTiendaClaroBundle:CustomPlanMovil', 'cus', 'WITH', 'cus.idPlan = p.id')
            ->leftJoin('DayscriptTiendaClaroBundle:TipoStoPlan', 't', 'WITH', 'p.idTipo = t.id')
            ->where('p.deletedAt is NULL')
            ->andWhere('t.idNegocio = :negocioId')
            ->setParameter('negocioId', $this->id_negocio_movil)
            ->orderBy('p.cuotaSinImp', 'ASC');
        if (isset($parameters['valorMin'])) {
            $planes = $planes->andWhere('p.cuotaSinImp >= :valorMin')
                ->setParameter('valorMin', $parameters['valorMin']);
        }
        if (isset($parameters['bp'])) {
            $planes = $planes->andWhere('cus.bp = :bp')
                ->setParameter('bp', $parameters['bp']);
        }
        if (isset($parameters['bpWeb'])) {
            $planes = $planes->andWhere('cus.bpWeb = :bpWeb')
                ->setParameter('bpWeb', $parameters['bpWeb']);
        }
        if (isset($parameters['oneId'])) {
            $planes = $planes->andWhere('cus.oneId = :oneId')
                ->setParameter('oneId', $parameters['oneId']);
        }
        if (isset($parameters['codigosAxis'])) {
            $planes = $planes->andWhere('cus.bp IN (:codigosAxis)')
                ->setParameter('codigosAxis', $parameters['codigosAxis']);
        }
        if (isset($parameters['codigosOne'])) {
            $planes = $planes->andWhere('cus.oneId IN (:codigosOne)')
                ->setParameter('codigosOne', $parameters['codigosOne']);
        }
        $planes = $planes->getQuery()->getResult();
        return $planes;

    }

    public function findBySlug($slug)
    {
        $plan = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('p')
            ->from('DayscriptTiendaClaroBundle:StoPlan', 'p')
            ->where('p.idTipo in (1,2,10,11,12,16)')
            ->andWhere('p.slug = :slugPlan')
            ->andWhere('p.deletedAt is NULL')
            ->setParameter('slugPlan', $slug)
            ->getQuery()->getOneOrNullResult();

        return $plan;

    }

    public function findOneBySlugAndSlugsTipo($slugPlan, $slugsTipo = [])
    {
        $plan = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('p')
            ->from('DayscriptTiendaClaroBundle:StoPlan', 'p')
            ->join('DayscriptTiendaClaroBundle:TipoStoPlan', 't', 'WITH', 'p.idTipo = t.id')
            ->where('t.slug in (:slugsTipo)')
            ->andWhere('p.slug = :slugPlan')
            ->andWhere('p.deletedAt is NULL')
            ->andWhere('t.deletedAt is NULL')
            ->setParameter('slugPlan', $slugPlan)
            ->setParameter('slugsTipo', $slugsTipo)
            ->getQuery()
            ->getOneOrNullResult();
        return $plan;
    }

    public function findBySlugandTransaction($slug, $idTipo = [])
    {
        $plan = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('p')
            ->from('DayscriptTiendaClaroBundle:StoPlan', 'p')
            ->where('p.idTipo in (:idTipo)')
            ->andWhere('p.slug = :slugPlan')
            ->andWhere('p.deletedAt is NULL')
            ->setParameter('slugPlan', $slug)
            ->setParameter('idTipo', $idTipo)
            ->getQuery()->getOneOrNullResult();

        return $plan;

    }

    public function findTipoPlan($idTipo = [])
    {
        $tipoPlan = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('tp')
            ->from('DayscriptTiendaClaroBundle:TipoStoPlan', 'tp')
            ->where('tp.id in (:idTipo)')
            ->andWhere('tp.deletedAt is NULL')
            ->setParameter('idTipo', $idTipo)
            ->getQuery()->getOneOrNullResult();

        return $tipoPlan;

    }

    public function findPlanTv($nombrePlan)
    {
        $plan = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('spn')
            ->from('DayscriptTiendaClaroBundle:StoPlan', 'p')
            ->leftJoin('DayscriptTiendaClaroBundle:Servicios1Play', 'spn', 'WITH', 'spn.nombre = p.nombre')
            ->where('p.idTipo in (17)')
            ->andWhere('p.nombre = :nombrePlan')
            ->andWhere('p.deletedAt is NULL')
            ->setParameter('nombrePlan', $nombrePlan)
            ->getQuery()->getOneOrNullResult();

        return $plan;

    }

    public function findCanales($idcanal = [])
    {
        /*$findCanales = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('pc')
            ->from('DayscriptTiendaClaroBundle:PLANCANALES', 'pc')
            ->where('pc.id in (:idPlan)')
            ->andWhere('pc.IDESTADO = 1')
            ->setParameter('idPlan', $idPlan)
            ->getQuery()->getResult();*/
        $sql = "SELECT c.ID, c.NOMBRE, c.CANAL, c.ICONO, c.IDESTADO, c.IDTIPOCANAL 
                FROM CANALES c
                WHERE c.ID = :IDCANAL
                AND c.IDESTADO = 1";
        $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
        $stmt->bindParam(':IDCANAL', $idcanal);
        $stmt->execute();
        $findCanales = $stmt->fetchAll();

        return $findCanales;

    }



}
